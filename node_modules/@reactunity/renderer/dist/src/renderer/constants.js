var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { ContinuousEventPriority, DefaultEventPriority, DiscreteEventPriority, IdleEventPriority } from 'react-reconciler/constants';
import { styleStringSymbol } from './diffing';
export var hideClass = 'react-unity__renderer__hidden';
export var eventPriorities = {
    discrete: DiscreteEventPriority,
    continuous: ContinuousEventPriority,
    default: DefaultEventPriority,
    idle: IdleEventPriority,
};
export var textTypes = {
    text: true,
    icon: true,
    style: true,
    script: true,
};
export function stringizePoolKey(key) {
    switch (typeof key) {
        case 'string': return key;
        case 'boolean': return key ? 'default' : '';
        case 'number': return key.toString();
        case 'undefined': return null;
        default: return '';
    }
}
export function getAllowedProps(props, type) {
    var children = props.children, tag = props.tag, pool = props.pool, rest = __rest(props, ["children", "tag", "pool"]);
    if (textTypes[type] && 'children' in props) {
        rest.children = (!children || typeof children === 'boolean') ? null : Array.isArray(children) ? children.join('') : children + '';
    }
    if (typeof props.style === 'string')
        rest[styleStringSymbol] = props.style;
    return rest;
}
export var commonReconciler = {
    // -------------------
    //     Scheduling
    // -------------------
    now: Date.now,
    getCurrentEventPriority: function () { return UnityBridge.CurrentEventPriority || eventPriorities.default; },
    noTimeout: -1,
    scheduleTimeout: function (callback, delay) { return setTimeout(callback, delay); },
    scheduleMicrotask: typeof queueMicrotask === 'function' ? queueMicrotask :
        function (callback) { return Promise.resolve(null).then(callback)
            .catch(function (error) { return setTimeout(function () { throw error; }, 0); }); },
    cancelTimeout: function (handle) { return clearTimeout(handle); },
    beforeActiveInstanceBlur: function () {
    },
    afterActiveInstanceBlur: function () {
    },
    getInstanceFromNode: function (node) {
        return undefined;
    },
    getInstanceFromScope: function (scopeInstance) {
        return undefined;
    },
    prepareScopeUpdate: function (scopeInstance, instance) {
    },
};
export var isDevelopment = process.env.NODE_ENV === 'development';
