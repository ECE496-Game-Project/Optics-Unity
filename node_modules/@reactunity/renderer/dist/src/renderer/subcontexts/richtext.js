export function parametrizeValue(value) {
    if (typeof value === 'number')
        return value + '';
    value = value + '';
    if (value.includes(' ') || value.includes('-'))
        return '"' + value + '"';
    return value;
}
export function stringifyRichText(node) {
    var _a, _b, _c;
    if (node.hidden)
        return '';
    if ('text' in node)
        return node.text;
    var acc = [];
    var tag = node.tag;
    if (tag) {
        acc.push('<');
        acc.push(tag);
        if (((_a = node.attributes) === null || _a === void 0 ? void 0 : _a.value) != null) {
            var value = (_b = node.attributes) === null || _b === void 0 ? void 0 : _b.value;
            acc.push('=');
            acc.push(parametrizeValue(value));
        }
        for (var key in node.attributes) {
            if (key === 'value')
                continue;
            if (Object.prototype.hasOwnProperty.call(node.attributes, key)) {
                var value = node.attributes[key];
                if (value != null) {
                    acc.push(' ');
                    acc.push(key);
                    acc.push('=');
                    acc.push(parametrizeValue(value));
                }
            }
        }
        acc.push('>');
    }
    if (((_c = node.children) === null || _c === void 0 ? void 0 : _c.length) > 0) {
        for (var _i = 0, _d = node.children; _i < _d.length; _i++) {
            var child = _d[_i];
            acc.push(stringifyRichText(child));
        }
        if (tag) {
            acc.push('</');
            acc.push(tag);
            acc.push('>');
        }
    }
    return acc.join('');
}
