function kebabize(str) {
    return str.split('').map(function (letter, idx) {
        return letter.toUpperCase() === letter
            ? "".concat(idx !== 0 ? '-' : '').concat(letter.toLowerCase())
            : letter;
    }).join('');
}
;
export function stringifyStyle(style) {
    if (typeof style === 'string')
        return style;
    var acc = [];
    for (var key in style) {
        if (Object.prototype.hasOwnProperty.call(style, key)) {
            var element = style[key];
            if (element != null) {
                acc.push(kebabize(key));
                acc.push(':');
                acc.push(element);
                acc.push(';');
            }
        }
    }
    return acc.join('');
}
export function stringifySVG(node) {
    var _a;
    if (node.hidden)
        return '';
    if ('text' in node)
        return node.text;
    var acc = [];
    var tag = node.tag;
    if (tag) {
        acc.push('<');
        acc.push(tag);
        for (var key in node.attributes) {
            if (Object.prototype.hasOwnProperty.call(node.attributes, key)) {
                var element = node.attributes[key];
                if (key === 'style')
                    element = stringifyStyle(element);
                if (element != null) {
                    acc.push(' ');
                    acc.push(kebabize(key));
                    acc.push('="');
                    acc.push(element);
                    acc.push('"');
                }
            }
        }
    }
    if (((_a = node.children) === null || _a === void 0 ? void 0 : _a.length) > 0) {
        if (tag)
            acc.push('>');
        for (var _i = 0, _b = node.children; _i < _b.length; _i++) {
            var child = _b[_i];
            acc.push(stringifySVG(child));
        }
        if (tag) {
            acc.push('</');
            acc.push(tag);
            acc.push('>');
        }
    }
    else {
        if (tag)
            acc.push(' />');
    }
    return acc.join('');
}
