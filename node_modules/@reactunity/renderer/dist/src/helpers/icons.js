var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import * as React from 'react';
var componentCache = {};
export var icon = new Proxy({}, {
    get: function (target, key) {
        if (typeof key === 'symbol')
            return target[key];
        var icon = key.replace(/^_/, '');
        var cmp = componentCache[icon];
        if (cmp)
            return cmp;
        cmp = function NamedIcon(props, ref) {
            return React.createElement('icon', __assign(__assign({ name: "<icon ".concat(icon, ">") }, props), { ref: ref }), icon);
        };
        cmp = React.forwardRef(cmp);
        componentCache[icon] = cmp;
        return cmp;
    },
});
