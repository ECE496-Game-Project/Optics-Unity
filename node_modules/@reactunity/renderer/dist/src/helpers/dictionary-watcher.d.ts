import { ReactUnity } from '../models/generated';
export interface DictionaryWatcher<T = Record<string, any>> {
    /** React Context that provides the value */
    context: React.Context<T>;
    /**
     * The provider component that should be used to wrap the components where this context will be used
     *
     * Usage:
     *
     * ```tsx
     * <watcher.Provider>
     *   <App />
     * </watcher.Provider>
     * ```
     */
    Provider: (props: {
        children?: React.ReactNode;
    }) => React.FunctionComponentElement<React.ProviderProps<T>>;
    /**
     * React Hook for getting the value from Context
     *
     *  Usage:
     *
     * ```tsx
     * function App() {
     *   const values = watcher.useContext();
     *   ...
     * }
     * ```
     */
    useContext: () => T;
    /**
     * React Hook for getting the value of this Dictionary. This one will subscribe only to the properties that are accessed.
     *
     *  Usage:
     *
     * ```tsx
     * function App() {
     *   const { a, b } = watcher.useValue();
     *   ...
     * }
     * ```
     */
    useValue: (subscribeToAllFields?: boolean, isEqual?: IsEqual) => T;
    /**
     * React Hook for getting a partial value from Context
     *
     *  Usage:
     *
     * ```tsx
     * function App() {
     *   const count = watcher.useSelector(st => st.count);
     *   ...
     * }
     * ```
     */
    useSelector<Res>(selector: (store: T) => Res, isEqual?: IsEqual<Res>): Res;
}
type IsEqual<T = any> = (a: T, b: T) => boolean;
/**
 * Creates a context that updates its value when the values in the dictionary change
 * @param dictionary The dictionary to be watched. Must implement the EventDictionary type in the C#
 * @param displayName A displayName to identify this context easier in case of problems
 */
export declare function createDictionaryWatcher<ValueType = any, RecordType = Record<string, ValueType>>(dictionary: ReactUnity.Reactive.ReactiveRecord<ValueType>, displayName?: string): DictionaryWatcher<RecordType>;
export {};
