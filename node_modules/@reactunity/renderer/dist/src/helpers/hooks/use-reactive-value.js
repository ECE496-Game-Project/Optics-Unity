import { useMemo } from 'react';
import { useSyncExternalStore } from 'use-sync-external-store/shim';
function createSubscriber(obj, isEqual) {
    var isReactive = obj && typeof obj === 'object' && ('Value' in obj);
    var snapshot = isReactive ? obj.Value : undefined;
    return {
        subscribe: function (onStoreChange) {
            snapshot = isReactive ? obj.Value : undefined;
            var remove = isReactive && typeof obj.AddListener === 'function' &&
                (obj === null || obj === void 0 ? void 0 : obj.AddListener(function () {
                    var prev = snapshot;
                    snapshot = isReactive ? obj.Value : undefined;
                    if (typeof isEqual !== 'function' || !isEqual(prev, snapshot)) {
                        onStoreChange();
                    }
                }));
            if (isReactive && typeof remove !== 'function')
                console.warn('The reactive value does not provide a change listener');
            return function () { return remove === null || remove === void 0 ? void 0 : remove(); };
        },
        getSnapshot: function () { return snapshot; },
    };
}
export function useReactiveValue(obj, isEqual) {
    var sb = useMemo(function () { return createSubscriber(obj, isEqual); }, [obj, isEqual]);
    return useSyncExternalStore(sb.subscribe, sb.getSnapshot, sb.getSnapshot);
}
