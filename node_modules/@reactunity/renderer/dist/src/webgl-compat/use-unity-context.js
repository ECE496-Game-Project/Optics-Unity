// Original file: https://github.com/jeffreylanters/react-unity-webgl/blob/main/module/source/hooks/use-unity-context.ts
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { useEffect, useRef } from 'react';
import { errorMessages } from './error-messages';
import { createEventSystem } from './use-event-system';
var createUnityContext = function (unityConfig) {
    var _a;
    var unityInstance = typeof ReactUnityWebGLCompat !== 'undefined' ? ReactUnityWebGLCompat : null;
    var setUnityInstance = function (instance) { return unityInstance = instance; };
    var loadingProgression = 1;
    var setLoadingProgression = function (progression) { return loadingProgression = progression; };
    var isLoaded = loadingProgression === 1;
    var setIsLoaded = function (loaded) {
        isLoaded = loaded;
        if (loaded)
            setLoadingProgression(1);
    };
    var initialisationError = null;
    var setInitialisationError = function (error) { return initialisationError = error; };
    var eventSystem = createEventSystem();
    var unityProvider = {
        setLoadingProgression: setLoadingProgression,
        setInitialisationError: setInitialisationError,
        setUnityInstance: setUnityInstance,
        setIsLoaded: setIsLoaded,
        unityConfig: unityConfig,
    };
    var requestFullscreen = function (enabled) {
        if (unityInstance === null) {
            console.warn(errorMessages.requestFullscreenNoUnityInstance);
            return;
        }
        unityInstance.SetFullscreen(enabled === true ? 1 : 0);
    };
    var requestPointerLock = function () {
        if (unityInstance === null ||
            typeof unityInstance.Module.canvas === 'undefined') {
            console.warn(errorMessages.requestPointerLockNoUnityInstanceOrCanvas);
            return;
        }
        return unityInstance.Module.canvas.requestPointerLock();
    };
    var sendMessage = function (gameObjectName, methodName, parameter) {
        if (unityInstance === null) {
            console.warn(errorMessages.sendMessageNoUnityInstance);
            return;
        }
        unityInstance.SendMessage(gameObjectName, methodName, parameter);
    };
    var takeScreenshot = function (dataType, quality) {
        if (unityInstance === null ||
            typeof unityInstance.Module.canvas === 'undefined') {
            console.warn(errorMessages.screenshotNoUnityInstanceOrCanvas);
            return;
        }
        return unityInstance.Module.canvas.toDataURL(dataType, quality);
    };
    var unload = function () {
        if (unityInstance === null) {
            console.warn(errorMessages.quitNoUnityInstance);
            return Promise.reject();
        }
        return unityInstance.Quit();
    };
    return __assign({ unityProvider: unityProvider, htmlCanvasElement: (_a = unityInstance === null || unityInstance === void 0 ? void 0 : unityInstance.Module) === null || _a === void 0 ? void 0 : _a.canvas, loadingProgression: loadingProgression, initialisationError: initialisationError, isLoaded: isLoaded, unityInstance: unityInstance, UNSAFE__unityInstance: unityInstance, setFullscreen: requestFullscreen, requestFullscreen: requestFullscreen, requestPointerLock: requestPointerLock, sendMessage: sendMessage, unload: unload, takeScreenshot: takeScreenshot, quitUnityInstance: unload, send: sendMessage, unityConfig: unityConfig }, eventSystem);
};
export var useUnityContext = function (unityConfig) {
    var ref = useRef();
    if (!ref.current) {
        ref.current = createUnityContext(unityConfig);
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
    useEffect(ref.current.onMount, []);
    return ref.current;
};
var UnityContext = /** @class */ (function () {
    function UnityContext(unityConfig) {
        Object.assign(this, createUnityContext(unityConfig));
    }
    return UnityContext;
}());
export { UnityContext };
