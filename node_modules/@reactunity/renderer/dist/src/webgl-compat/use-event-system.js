// Original file: https://github.com/jeffreylanters/react-unity-webgl/blob/main/module/source/hooks/use-event-system.ts
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
import { useEffect, useRef } from 'react';
import { errorMessages } from './error-messages';
var mountedEventDispatchers = [];
var dispatchReactUnityEvent = function (eventName) {
    var parameters = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        parameters[_i - 1] = arguments[_i];
    }
    var returnValue = undefined;
    mountedEventDispatchers.forEach(function (dispatchEvent) {
        returnValue = dispatchEvent.apply(void 0, __spreadArray([eventName], parameters, false));
    });
    return returnValue;
};
if (typeof globalThis !== 'undefined' || typeof window !== 'undefined') {
    (globalThis || window).dispatchReactUnityEvent = dispatchReactUnityEvent;
}
export var createEventSystem = function () {
    var eventListeners = [];
    var addEventListener = function (eventName, callback) {
        eventListeners = __spreadArray(__spreadArray([], eventListeners, true), [
            { eventName: eventName, callback: callback },
        ], false);
    };
    var removeEventListener = function (eventName, callback) {
        eventListeners = eventListeners.filter(function (eventListener) { return !(eventListener.eventName === eventName &&
            (!callback || eventListener.callback === callback)); });
    };
    var removeAllEventListeners = function () {
        eventListeners = [];
    };
    var dispatchEvent = function (eventName) {
        var parameters = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            parameters[_i - 1] = arguments[_i];
        }
        var eventListener = eventListeners.find(function (eventListener) { return eventListener.eventName === eventName; });
        if (typeof eventListener === 'undefined') {
            console.warn(errorMessages.noEventListener, { eventName: eventName });
            return;
        }
        return eventListener.callback.apply(eventListener, parameters);
    };
    var onMount = function () {
        mountedEventDispatchers.push(dispatchEvent);
        return function () {
            mountedEventDispatchers.splice(mountedEventDispatchers.indexOf(dispatchEvent), 1);
        };
    };
    return {
        on: addEventListener,
        addEventListener: addEventListener,
        removeEventListener: removeEventListener,
        dispatchEvent: dispatchEvent,
        removeAllEventListeners: removeAllEventListeners,
        onMount: onMount,
    };
};
export var useEventSystem = function () {
    var ref = useRef();
    if (!ref.current) {
        ref.current = createEventSystem();
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
    useEffect(ref.current.onMount, []);
    return ref.current;
};
