import type { UnityConfig } from 'react-unity-webgl';
import type { UnityInstance } from 'react-unity-webgl/declarations/unity-instance';
import { UnityProvider } from 'react-unity-webgl/distribution/types/unity-provider';
import { EventCallback, ReactUnityEventParameter, UnityContextType } from './types';
export declare const useUnityContext: (unityConfig: UnityConfig) => UnityContextType;
export declare class UnityContext implements UnityContextType {
    constructor(unityConfig: UnityConfig);
    addEventListener: ((eventName: string, callback: (...parameters: ReactUnityEventParameter[]) => ReactUnityEventParameter) => void) & ((eventName: string, callback: EventCallback) => void);
    removeEventListener: ((eventName: string, callback: (...parameters: ReactUnityEventParameter[]) => ReactUnityEventParameter) => void) & ((eventName: string, callback?: EventCallback) => void);
    unityProvider: UnityProvider;
    loadingProgression: number;
    isLoaded: boolean;
    initialisationError: Error;
    UNSAFE__unityInstance: UnityInstance;
    requestFullscreen: (enabled: boolean) => void;
    sendMessage: (gameObjectName: string, methodName: string, parameter?: ReactUnityEventParameter) => void;
    takeScreenshot: (dataType?: string, quality?: number) => string;
    requestPointerLock: () => void;
    unload: () => Promise<void>;
    UNSAFE__detachAndUnloadImmediate: () => Promise<void>;
    on: (eventName: string, callback: EventCallback) => void;
    removeAllEventListeners: () => void;
    dispatchEvent: (eventName: string, ...parameters: any) => void;
    onMount: () => () => void;
    unityConfig: UnityConfig;
    unityInstance: UnityInstance;
    htmlCanvasElement: any;
    send: (gameObjectName: string, methodName: string, parameter?: ReactUnityEventParameter) => void;
    setFullscreen: (enabled: boolean) => void;
    quitUnityInstance: () => Promise<void>;
}
